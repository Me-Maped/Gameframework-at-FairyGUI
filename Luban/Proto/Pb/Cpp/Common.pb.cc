// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

#include "Common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pb {
PROTOBUF_CONSTEXPR ErrorAck::ErrorAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cmdid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ErrorAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorAckDefaultTypeInternal() {}
  union {
    ErrorAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorAckDefaultTypeInternal _ErrorAck_default_instance_;
PROTOBUF_CONSTEXPR PingReq::PingReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cmdcode_)*/0
  , /*decltype(_impl_.protocolswitch_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PingReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingReqDefaultTypeInternal() {}
  union {
    PingReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingReqDefaultTypeInternal _PingReq_default_instance_;
PROTOBUF_CONSTEXPR PingAck::PingAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PingAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingAckDefaultTypeInternal() {}
  union {
    PingAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingAckDefaultTypeInternal _PingAck_default_instance_;
PROTOBUF_CONSTEXPR TestNtf::TestNtf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestNtfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestNtfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestNtfDefaultTypeInternal() {}
  union {
    TestNtf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestNtfDefaultTypeInternal _TestNtf_default_instance_;
}  // namespace pb
static ::_pb::Metadata file_level_metadata_Common_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Common_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Common_2eproto = nullptr;

const uint32_t TableStruct_Common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ErrorAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::ErrorAck, _impl_.cmdid_),
  PROTOBUF_FIELD_OFFSET(::pb::ErrorAck, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::PingReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::PingReq, _impl_.cmdcode_),
  PROTOBUF_FIELD_OFFSET(::pb::PingReq, _impl_.protocolswitch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::PingAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::PingAck, _impl_.code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TestNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pb::TestNtf, _impl_.time_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pb::ErrorAck)},
  { 8, -1, -1, sizeof(::pb::PingReq)},
  { 16, -1, -1, sizeof(::pb::PingAck)},
  { 23, -1, -1, sizeof(::pb::TestNtf)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pb::_ErrorAck_default_instance_._instance,
  &::pb::_PingReq_default_instance_._instance,
  &::pb::_PingAck_default_instance_._instance,
  &::pb::_TestNtf_default_instance_._instance,
};

const char descriptor_table_protodef_Common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Common.proto\022\002pb\"&\n\010ErrorAck\022\r\n\005CmdId\030"
  "\001 \001(\005\022\013\n\003Msg\030\002 \001(\t\"2\n\007PingReq\022\017\n\007CmdCode"
  "\030\001 \001(\005\022\026\n\016ProtocolSwitch\030\002 \001(\005\"\027\n\007PingAc"
  "k\022\014\n\004Code\030\001 \001(\005\"\027\n\007TestNtf\022\014\n\004Time\030\001 \001(\005"
  "B\014Z\005./;pb\252\002\002Pbb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Common_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Common_2eproto = {
    false, false, 182, descriptor_table_protodef_Common_2eproto,
    "Common.proto",
    &descriptor_table_Common_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_Common_2eproto::offsets,
    file_level_metadata_Common_2eproto, file_level_enum_descriptors_Common_2eproto,
    file_level_service_descriptors_Common_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Common_2eproto_getter() {
  return &descriptor_table_Common_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Common_2eproto(&descriptor_table_Common_2eproto);
namespace pb {

// ===================================================================

class ErrorAck::_Internal {
 public:
};

ErrorAck::ErrorAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.ErrorAck)
}
ErrorAck::ErrorAck(const ErrorAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ErrorAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.cmdid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.cmdid_ = from._impl_.cmdid_;
  // @@protoc_insertion_point(copy_constructor:pb.ErrorAck)
}

inline void ErrorAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.cmdid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ErrorAck::~ErrorAck() {
  // @@protoc_insertion_point(destructor:pb.ErrorAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ErrorAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void ErrorAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ErrorAck::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ErrorAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.cmdid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 CmdId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cmdid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.ErrorAck.Msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ErrorAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ErrorAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 CmdId = 1;
  if (this->_internal_cmdid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmdid(), target);
  }

  // string Msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.ErrorAck.Msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ErrorAck)
  return target;
}

size_t ErrorAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ErrorAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 CmdId = 1;
  if (this->_internal_cmdid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cmdid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ErrorAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ErrorAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ErrorAck::GetClassData() const { return &_class_data_; }


void ErrorAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ErrorAck*>(&to_msg);
  auto& from = static_cast<const ErrorAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.ErrorAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_cmdid() != 0) {
    _this->_internal_set_cmdid(from._internal_cmdid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorAck::CopyFrom(const ErrorAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ErrorAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorAck::IsInitialized() const {
  return true;
}

void ErrorAck::InternalSwap(ErrorAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  swap(_impl_.cmdid_, other->_impl_.cmdid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Common_2eproto_getter, &descriptor_table_Common_2eproto_once,
      file_level_metadata_Common_2eproto[0]);
}

// ===================================================================

class PingReq::_Internal {
 public:
};

PingReq::PingReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.PingReq)
}
PingReq::PingReq(const PingReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PingReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cmdcode_){}
    , decltype(_impl_.protocolswitch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cmdcode_, &from._impl_.cmdcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.protocolswitch_) -
    reinterpret_cast<char*>(&_impl_.cmdcode_)) + sizeof(_impl_.protocolswitch_));
  // @@protoc_insertion_point(copy_constructor:pb.PingReq)
}

inline void PingReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cmdcode_){0}
    , decltype(_impl_.protocolswitch_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PingReq::~PingReq() {
  // @@protoc_insertion_point(destructor:pb.PingReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PingReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PingReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PingReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PingReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.cmdcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.protocolswitch_) -
      reinterpret_cast<char*>(&_impl_.cmdcode_)) + sizeof(_impl_.protocolswitch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 CmdCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cmdcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ProtocolSwitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.protocolswitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PingReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PingReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 CmdCode = 1;
  if (this->_internal_cmdcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmdcode(), target);
  }

  // int32 ProtocolSwitch = 2;
  if (this->_internal_protocolswitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_protocolswitch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PingReq)
  return target;
}

size_t PingReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PingReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 CmdCode = 1;
  if (this->_internal_cmdcode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cmdcode());
  }

  // int32 ProtocolSwitch = 2;
  if (this->_internal_protocolswitch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_protocolswitch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PingReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingReq::GetClassData() const { return &_class_data_; }


void PingReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PingReq*>(&to_msg);
  auto& from = static_cast<const PingReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.PingReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cmdcode() != 0) {
    _this->_internal_set_cmdcode(from._internal_cmdcode());
  }
  if (from._internal_protocolswitch() != 0) {
    _this->_internal_set_protocolswitch(from._internal_protocolswitch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PingReq::CopyFrom(const PingReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingReq::IsInitialized() const {
  return true;
}

void PingReq::InternalSwap(PingReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PingReq, _impl_.protocolswitch_)
      + sizeof(PingReq::_impl_.protocolswitch_)
      - PROTOBUF_FIELD_OFFSET(PingReq, _impl_.cmdcode_)>(
          reinterpret_cast<char*>(&_impl_.cmdcode_),
          reinterpret_cast<char*>(&other->_impl_.cmdcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PingReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Common_2eproto_getter, &descriptor_table_Common_2eproto_once,
      file_level_metadata_Common_2eproto[1]);
}

// ===================================================================

class PingAck::_Internal {
 public:
};

PingAck::PingAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.PingAck)
}
PingAck::PingAck(const PingAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PingAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:pb.PingAck)
}

inline void PingAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PingAck::~PingAck() {
  // @@protoc_insertion_point(destructor:pb.PingAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PingAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PingAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PingAck::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PingAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PingAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PingAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PingAck)
  return target;
}

size_t PingAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PingAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PingAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingAck::GetClassData() const { return &_class_data_; }


void PingAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PingAck*>(&to_msg);
  auto& from = static_cast<const PingAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.PingAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PingAck::CopyFrom(const PingAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PingAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingAck::IsInitialized() const {
  return true;
}

void PingAck::InternalSwap(PingAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PingAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Common_2eproto_getter, &descriptor_table_Common_2eproto_once,
      file_level_metadata_Common_2eproto[2]);
}

// ===================================================================

class TestNtf::_Internal {
 public:
};

TestNtf::TestNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pb.TestNtf)
}
TestNtf::TestNtf(const TestNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestNtf* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.time_ = from._impl_.time_;
  // @@protoc_insertion_point(copy_constructor:pb.TestNtf)
}

inline void TestNtf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestNtf::~TestNtf() {
  // @@protoc_insertion_point(destructor:pb.TestNtf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestNtf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TestNtf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestNtf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestNtf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TestNtf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TestNtf)
  return target;
}

size_t TestNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TestNtf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestNtf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestNtf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestNtf::GetClassData() const { return &_class_data_; }


void TestNtf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestNtf*>(&to_msg);
  auto& from = static_cast<const TestNtf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.TestNtf)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestNtf::CopyFrom(const TestNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TestNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNtf::IsInitialized() const {
  return true;
}

void TestNtf::InternalSwap(TestNtf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.time_, other->_impl_.time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNtf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Common_2eproto_getter, &descriptor_table_Common_2eproto_once,
      file_level_metadata_Common_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ErrorAck*
Arena::CreateMaybeMessage< ::pb::ErrorAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::ErrorAck >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::PingReq*
Arena::CreateMaybeMessage< ::pb::PingReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::PingReq >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::PingAck*
Arena::CreateMaybeMessage< ::pb::PingAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::PingAck >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TestNtf*
Arena::CreateMaybeMessage< ::pb::TestNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::TestNtf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
